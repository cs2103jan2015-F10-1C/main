//@author: a0110748j



	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Date.cpp
	 */

bool Date::isDate1(string str) {

	string monthKey[24] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
		"jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec" };
	int pos = -1;

	for (size_t i = 0; i < 24; i++) {
		pos = str.find(monthKey[i]);
		if (pos == 0) {
			return true;
		}
	}
	return false;
}

	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Date.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Date.cpp
	 */

bool Date::isDate2(string str) {

	string dateKey[17] = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday",
		"monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "today", "tomorrow", "/" };
	int pos = -1;

	for (size_t i = 0; i < 17; i++) {
		pos = str.find(dateKey[i]);
		if (pos == 0) {
			return true;
		}
		else if (pos > 0 && i == 16) { // to find and ensure it is a date i.e. 11/12
			return true;
		}
	  }
	return false;
}

	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Date.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Date.cpp
	 */

string Date::getTodayDate() {

	time_t rawTime;
	struct tm * timeInfo = new struct tm;

	time(&rawTime);
	localtime_s(timeInfo, &rawTime);

	int day = timeInfo->tm_mday;
	int month = timeInfo->tm_mon + 1;
	int year = timeInfo->tm_year + SYSTEM_TIME_YEAR_STARTING_POINT;
	int wDay = timeInfo->tm_wday;

	string currentDate = to_string(day) + "/" + to_string(month);
	return currentDate;
}

	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Date.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Date.cpp
	 */

string Date::getTomorrowDate() {

	time_t rawTime;
	struct tm * timeInfo = new struct tm;

	time(&rawTime);
	rawTime = rawTime + SEC_PER_DAY;
	localtime_s(timeInfo, &rawTime);

	int day = timeInfo->tm_mday;
	int month = timeInfo->tm_mon + 1;
	int year = timeInfo->tm_year + SYSTEM_TIME_YEAR_STARTING_POINT;
	int wDay = timeInfo->tm_wday;

	string tomorrow = to_string(day) + "/" + to_string(month);
	Standardise standard;
	standard.standardiseDate(tomorrow);
	return tomorrow;

}

	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Date.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Date.cpp
	 */

string Date::getXDaysLaterDate(int add) {

	time_t rawTime;
	struct tm * timeInfo = new struct tm;

	time(&rawTime);
	rawTime = rawTime + SEC_PER_DAY;
	localtime_s(timeInfo, &rawTime);

	int day = timeInfo->tm_mday;
	int month = timeInfo->tm_mon + 1;
	int year = timeInfo->tm_year + SYSTEM_TIME_YEAR_STARTING_POINT;
	int wDay = timeInfo->tm_wday;

	day = day + add - 1;
	string xDays = to_string(day) + "/" + to_string(month);
	Standardise standard;
	standard.standardiseDate(xDays);
	return xDays;

}

	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Date.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteAdd.cpp
	 */

string ExecuteAdd::execute(Storage& _storage, ExtDataBase extdb, vector<list<StickyNote>::iterator>& _allItems, bool& successful) {

	string userInput = _task->getRemaining();

	if (userInput.empty()) {
		successful = false;
		return MESSAGE_ERROR;
	}

	string details="";
	string date = "";
	string time = "";
	string priority = "";
	string index = "";
	string category = "";
	HandleInput handleInput;
	bool isADeadline = false;
	bool isConventionalDate = false;
	bool validDate = false;
	Date checkDate;

	handleInput.handle(userInput, details, date, time, priority, index, category, isADeadline, _storage);

	Standardise item;

	time = item.standardiseTime(time);

	if (!item.verifyValidTime(time)){
		successful = false;
		return MESSAGE_INVALID_TIME;
	}

	if (date != ""){
		validDate = checkDate.verifyValidDate(date, isConventionalDate);
	}

	if (isConventionalDate && !validDate){
		successful = false;
		return MESSAGE_INVALID_DATE;
	}

	date = item.standardiseDate(date);
	if (date == "unbounded event" && time != "All day event") {
		date = checkDate.getTodayDate();
	}
	category = item.standardiseCategory(isADeadline, time);
	index = handleInput.getIndex(date, _storage);

	StickyNote note;
	note.setEverything(details, date, time, priority, index);
	note.setCategory(category);
	note.setStatus("incomplete");
	int st;
	int et;
	checkDate.setTaskTime(st, et, time, category);
	note.setStartTime(st);
	note.setEndTime(et);
	string result = _storage.addNewNote(note);

	string undo;
	undo = "delete " + index;
	_undoAdd.push(undo);

	successful = true;
	return result;
}


string ExecuteAdd::undo() {

	string undoAdd;
	undoAdd = _undoAdd.top();
	_undoAdd.pop();
	return undoAdd;
}

	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteAdd.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteDisplay.cpp
	 */

string ExecuteDisplay::execute(Storage& _storage, ExtDataBase extdb, vector<list<StickyNote>::iterator>& _allItems, bool& successful) {

	string type = _task->getRemaining();
	
	if (type == "") {
		ostringstream oss;

		_allItems.clear();

		vector<list<StickyNote>::iterator> taskToday;
		vector<list<StickyNote>::iterator> taskTmr;
		vector<list<StickyNote>::iterator> unbounded;


		getTodayTasks(taskToday, _storage);
		getTomorrowTasks(taskTmr, _storage);
		getUnboundedTasks(unbounded, _storage);

		pushToAllItem(taskToday, _allItems);
		pushToAllItem(taskTmr, _allItems);
		pushToAllItem(unbounded, _allItems);

		// show to user

		Date date;
		int counter = 1;

		oss << "TODAY: " << "\r\n";

		for (size_t i = 0; i < _allItems.size(); i++) {
			if ((_allItems[i]->getDate() == date.getTodayDate()) && _allItems[i]->getStatus() != "cleared") {
			oss << counter << ". " << _storage.oneTaskInfoTypeOne(_allItems[i]);
				counter++;
			}
		}


		oss << "\r\n" << "TOMORROW: " << "\r\n";

		for (size_t i = 0; i < _allItems.size(); i++) {
			if ((_allItems[i]->getDate() == date.getTomorrowDate()) && _allItems[i]->getStatus() != "cleared") {
				oss << counter << ". " << _storage.oneTaskInfoTypeOne(_allItems[i]);
				counter++;
			}
		}

		oss << "\r\n" << "UNBOUNDED: " << "\r\n";

		for (size_t i = 0; i < _allItems.size(); i++) {
			if ((_allItems[i]->getDate() == "unbounded event") && _allItems[i]->getStatus() != "cleared") {
				oss << counter << ". " << _storage.oneTaskInfoTypeOne(_allItems[i]);
				counter++;
			}
		}

		successful = true;
		return oss.str();
	} // end if no specification.

	else if (type == "search") {
		ostringstream oss;
		int counter = 1;

		if (_allItems.size() == 0) {
			successful = false;
			return MESSAGE_EMPTY_SEARCH;
		}
		else {
			for (size_t i = 0; i < _allItems.size(); i++) {
				oss << counter << ". " << _storage.oneTaskInfoTypeOne(_allItems[i]);
				counter++;
			}
			successful = true;
			return oss.str();
		}
	} // end search if

	else if (type == "week") {

		ostringstream oss;

		_allItems.clear();

		vector<list<StickyNote>::iterator> day1;
		vector<list<StickyNote>::iterator> day2;
		vector<list<StickyNote>::iterator> day3;
		vector<list<StickyNote>::iterator> day4;
		vector<list<StickyNote>::iterator> day5;
		vector<list<StickyNote>::iterator> day6;
		vector<list<StickyNote>::iterator> day7;

		getTodayTasks(day1, _storage);
		getTomorrowTasks(day2, _storage);
		getDay3Tasks(day3, _storage);
		getDay4Tasks(day4, _storage);
		getDay5Tasks(day5, _storage);
		getDay6Tasks(day6, _storage);
		getDay7Tasks(day7, _storage);


		pushToAllItem(day1, _allItems);
		pushToAllItem(day2, _allItems);
		pushToAllItem(day3, _allItems);
		pushToAllItem(day4, _allItems);
		pushToAllItem(day5, _allItems);
		pushToAllItem(day6, _allItems);
		pushToAllItem(day7, _allItems);


		//show to user
		
		Date date;
		int counter = 1;
		// day 1

		oss << date.getDateDetails(date.getTodayDate()) << "\r\n";

		for (size_t i = 0; i < _allItems.size(); i++) {
			if ((_allItems[i]->getDate() == date.getTodayDate()) && _allItems[i]->getStatus() != "cleared") {
				oss << counter << ". " << _storage.oneTaskInfoTypeOne(_allItems[i]);
				counter++;
			}
		}
		// day 2

		oss << "\r\n" << date.getDateDetails(date.getTomorrowDate()) << "\r\n";

		for (size_t i = 0; i < _allItems.size(); i++) {
			if ((_allItems[i]->getDate() == date.getTomorrowDate()) && _allItems[i]->getStatus() != "cleared") {
				oss << counter << ". " << _storage.oneTaskInfoTypeOne(_allItems[i]);
				counter++;
			}
		}
		// day 3

		oss << "\r\n" << date.getDateDetails(date.getXDaysLaterDate(2)) << "\r\n";

		for (size_t i = 0; i < _allItems.size(); i++) {
			if ((_allItems[i]->getDate() == date.getXDaysLaterDate(2)) && _allItems[i]->getStatus() != "cleared") {
				oss << counter << ". " << _storage.oneTaskInfoTypeOne(_allItems[i]);
				counter++;
			}
		}
		// day 4

		oss << "\r\n" << date.getDateDetails(date.getXDaysLaterDate(3)) << "\r\n";

		for (size_t i = 0; i < _allItems.size(); i++) {
			if ((_allItems[i]->getDate() == date.getXDaysLaterDate(3)) && _allItems[i]->getStatus() != "cleared") {
				oss << counter << ". " << _storage.oneTaskInfoTypeOne(_allItems[i]);
				counter++;
			}
		}
		// day 5

		oss << "\r\n" << date.getDateDetails(date.getXDaysLaterDate(4)) << "\r\n";

		for (size_t i = 0; i < _allItems.size(); i++) {
			if ((_allItems[i]->getDate() == date.getXDaysLaterDate(4)) && _allItems[i]->getStatus() != "cleared") {
				oss << counter << ". " << _storage.oneTaskInfoTypeOne(_allItems[i]);
				counter++;
			}
		}
		//day 6

		oss << "\r\n" << date.getDateDetails(date.getXDaysLaterDate(5)) << "\r\n";

		for (size_t i = 0; i < _allItems.size(); i++) {
			if ((_allItems[i]->getDate() == date.getXDaysLaterDate(5)) && _allItems[i]->getStatus() != "cleared") {
				oss << counter << ". " << _storage.oneTaskInfoTypeOne(_allItems[i]);
				counter++;
			}
		}
		// day 7

		oss << "\r\n" << date.getDateDetails(date.getXDaysLaterDate(6)) << "\r\n";

		for (size_t i = 0; i < _allItems.size(); i++) {
			if ((_allItems[i]->getDate() == date.getXDaysLaterDate(6)) && _allItems[i]->getStatus() != "cleared") {
				oss << counter << ". " << _storage.oneTaskInfoTypeOne(_allItems[i]);
				counter++;
			}
		}
		successful = true;
		return oss.str();

	} // end week if
	else {
		successful = false;
		return MESSAGE_ERROR;
	}

}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteDisplay.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteDisplay.cpp
	 */

void ExecuteDisplay::getDay6Tasks(vector<list<StickyNote>::iterator>& day6, Storage& _storage) {
	Date date;
	string xDay = date.getXDaysLaterDate(5);
	list<StickyNote>::iterator iter = _storage.getIter();
	size_t _size = _storage.getSize();

	for (size_t i = 0; i < _size; i++, iter++){
		if (iter->getDate() == xDay){
			day6.push_back(iter);
		}
	}

}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteDisplay.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteSearch.cpp
	 */

string ExecuteSearch::execute(Storage& _storage, ExtDataBase extdb, vector<list<StickyNote>::iterator>& _allItems, bool& successful) {

	_allItems.clear();

	string infoToBeSearched = _task->getRemaining();
	list<StickyNote>::iterator iter;
	iter = _storage.getIter();
	int _size = _storage.getSize();

	if (infoToBeSearched == ""){
		successful = false;
		return MESSAGE_NO_INFO_GIVEN;
	}

	bool infoIsFound = false;
	int i = 0;
	for (iter; i < _size; i++, iter++){
		if (haveThisInfo(infoToBeSearched, iter)){
			infoIsFound = true;
			_allItems.push_back(iter);
		}
	}

	if (infoIsFound){
		string returnMsg;
		returnMsg = MESSAGE_SUCCESSFUL_SEARCH + infoToBeSearched + "\r\n" + MESSAGE_HOME_RETURN;
		successful = true;
		return returnMsg;
	}
	else{
		successful = false;
		return MESSAGE_INFO_UNFOUND;
	}
}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteSearch.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteSort.cpp
	 */

string ExecuteSort::getTodayDate(){
	time_t rawTime;
	struct tm * timeInfo = new struct tm;

	time(&rawTime);
	localtime_s(timeInfo, &rawTime);

	int day = timeInfo->tm_mday;
	int month = timeInfo->tm_mon + 1;
	int year = timeInfo->tm_year + 1900;
	int wDay = timeInfo->tm_wday;

	string currentDate = to_string(day) + "/" + to_string(month);
	return currentDate;
}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteSort.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteSort.cpp
	 */

void ExecuteSort::getFutureTasks(vector<list<StickyNote>::iterator> &futureTasks, Storage& _storage){

	list<StickyNote>::iterator iter = _storage.getIter();
	size_t _size = _storage.getSize();
	time_t rawTime;
	struct tm * timeInfo = new struct tm;

	time(&rawTime);
	localtime_s(timeInfo, &rawTime);

	int dayNow = timeInfo->tm_mday;
	int monthNow = timeInfo->tm_mon + 1;

	for (size_t i = 0; i < _size; i++, iter++){
		string curTaskDate = iter->getDate();
		int posOfSlash = curTaskDate.find_first_of('/', 0);
		string day = curTaskDate.substr(0, posOfSlash);
		string month = curTaskDate.substr(posOfSlash + 1);
		int dayInt = atoi(day.c_str());
		int monthInt = atoi(month.c_str());
		iter->setDay(dayInt);
		iter->setMonth(monthInt);
		if (monthInt>monthNow){
			futureTasks.push_back(iter);
		}
		else if (monthInt == monthNow && dayInt >= dayNow){
			futureTasks.push_back(iter);
		}
		else{
		}
	}

	return;
}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExecuteSort.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExtDataBase.cpp
	 */

void ExtDataBase::autoSave(Storage& _storage) {
	
	ofstream ofs;
	size_t _size = _storage.getSize();
	list<StickyNote>::iterator iter;
	iter = _storage.getIter();

	getLocation();
	ofs.open(_currentLocation);
	assert(ofs.is_open() == true);
	for (size_t i = 0; i < _size; i++, iter++){
		if (iter->getStatus() != "cleared"){
			ofs << _storage.oneTaskInfoTypeTwo(iter);
		}
	}
	ofs.close();
	return;
}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\ExtDataBase.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\HandleInput.cpp
	 */

void HandleInput::handle(string userInput, string& details, string& date, string& time, string& priority, 
	string& index, string& category, bool& isADeadline, Storage& _storage) {

	istringstream iss(userInput);
	string extract;
	string buffer;
	string deadline;
	Date checkDate;

	while (iss) {


		iss >> extract;

		if (!iss) {
			break;
		}

		if (isSpecialDetail(extract)) { // used to find details enclosed with " "
			if (!buffer.empty()) {
				if (details.empty()) {
					details = buffer;
				}
				else {
					details = details + " " + buffer;
				}
			}
			buffer.clear();

			extract = extract.substr(1); // removes the " at start of word

			if (extract[extract.length() - 1] != '"') {
				do{
					if (details.empty()) {
						details = extract;
					}
					else {
						details = details + " " + extract;
					}
					iss >> extract;
				} while (extract[extract.length() - 1] != '"');
			}

			extract = extract.substr(0, extract.length() - 1); // remove the final "
			details = details + " " + extract;
		}
		else if (isPriority(extract)) {
			priority = extract.substr(1); // to remove "-"
		}
		else if (isTime(extract)) {
			if (!deadline.empty()) {
				isADeadline = true;
				deadline.clear();
			}
			if (time.empty()) {
				time = extract;
			}
			else {
				if (buffer == "-" || buffer == "to") {
					time = time + "-" + extract;
				}
			}
			buffer.clear();
		}
		else if (checkDate.isDate1(extract)) { // date1 means there are more things to extract adjacent to it, either before or after. 
			if (!deadline.empty()) {
				isADeadline = true;
				deadline.clear();
			}
			if (!buffer.empty()) {
				date = buffer + " " + extract;
			}
			else {
				date = extract;
				iss >> extract; // take in next item
				date = date + " " + extract;
			}
			buffer.clear();
		}
		else if (checkDate.isDate2(extract)) { // date2 identifies date terms which do not need other adjacent terms
			if (!deadline.empty()) {
				isADeadline = true;
				deadline.clear();
			}
			if (buffer == "on") {
				buffer.clear();
			}
			if (!buffer.empty()) {

				if (isComing(buffer)) {
					date = "this " + extract;
				}
				else if (buffer == "next") {
					date = "next " + extract;
				}
			}
			else {
				date = extract;
			}
			buffer.clear();
		}
		else if (isBuffer(extract)) {

			if (buffer.empty()) {
				buffer = extract;
			}
			else {
				buffer = buffer + " " + extract;
			}
		}
		else if (isDeadline(extract)) {

			if (extract == "be" && buffer == "to" && deadline.empty()) {
				deadline = buffer + " " + extract;
				buffer.clear();
			}
			else if (extract == "be" && buffer != "to") {
				buffer = buffer + " " + extract;
			}
			else if ((extract == "by" && deadline.empty()) || (extract == "before" && deadline.empty())) {
				deadline = extract;
			}
			else if (isDeadlineProposition(extract)){

				if (isNotDeadlineKeyword(deadline)) {
					buffer = buffer + " " + extract;
				}
			}
			else {
				deadline = deadline + " " + extract;
			}
		}
		else {
			if (!buffer.empty()) {
				details = details + " " + buffer;
				buffer.clear();
			}
			if (!deadline.empty()) {
				details = details + " " + deadline;
				deadline.clear();
			}
			if (details.empty()) {
				details = extract;
			}
			else {
				details = details + " " + extract;
			}
		}
	} // end while(iss)

	int startingPos = details.find_first_not_of(" ");
	if (startingPos >= 0){
		details = details.substr(startingPos);
	}
}


	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\HandleInput.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Logic.cpp
	 */

string Logic::handleInput(string userInput, bool& edited, bool& successful) {
	
	UserTask* task = _parser->parse(userInput);
	string result;
	Executor* executor;

	if (task->getCommand() == COMMAND::EXIT) {
		archive();
		_extdb.autoSave(_storage);
		exit(0);
	}
	else if (task->getCommand() == COMMAND::ERROR) {
		successful = false;
		result = MESSAGE_UNRECOGNISED_COMMAND_TYPE;
	}
	
	else if (task->getCommand() == COMMAND::UNDO) {
		
		if (!_inputHistory.empty()) {
			executor = _inputHistory.top();
			_inputHistory.pop(); 
			string conduct = executor->undo();
			task = _parser->parse(conduct);
			executor = dispatch(task);
			result = executor->execute(_storage, _extdb, _allItems, successful);
			_extdb.autoSave(_storage);
		}
		else {
			successful = false;
			result = MESSAGE_INVALID_UNDO;
		}

	} 
	else {
			 executor = dispatch(task);
			 if (task->getCommand() == COMMAND::ADD || task->getCommand() == COMMAND::DELETE
				 || task->getCommand() == COMMAND::EDIT || task->getCommand() == COMMAND::DIRECTORY ||
				 task->getCommand() == COMMAND::MARK) {
				 _inputHistory.push(executor);
			 }
			 result = executor->execute(_storage, _extdb, _allItems, successful);
			 _extdb.autoSave(_storage);
		 }

	if (task->getCommand() == COMMAND::ADD || task->getCommand() == COMMAND::DELETE
		|| task->getCommand() == COMMAND::EDIT || task->getCommand() == COMMAND::UNDO
		|| task->getCommand() == COMMAND::MARK || task->getCommand() == COMMAND::SEARCH) {
		edited = true;
	}
	

	return result;
}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Logic.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Standardise.cpp
	 */

string Standardise::standardiseDate(string date) {

	string standardisedDate;
	string extract;
	istringstream iss(date);
	string day_extract = "";
	string month_extract = "";
	

	// get current date

	time_t rawTime;
	struct tm * timeInfo = new struct tm;

	time(&rawTime);
	localtime_s(timeInfo, &rawTime);

	int day = timeInfo->tm_mday;
	int month = timeInfo->tm_mon + 1;
	int year = timeInfo->tm_year + 1900;
	int wDay = timeInfo->tm_wday;

	// info arrays
	int daysInMth[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	string mthsInYr[12] = { "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec" };
	string dayInWeek[7] = { "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" };
	string others[2] = { "today", "tomorrow" };
	string controls[2] = { "next", "this" };

	// start standardising

	if (date.empty()) {
		return "unbounded event";
	}

	if (date == "unbounded event") {
		return date;
	}

	if (date == "99/99") {
		return "unbounded event";
	}


	while (iss) {

		bool identified = false;
		iss >> extract;

		if (!iss){
			break;
		}

		if (!identified) {
			// case already in standardised form
			int found = -1;
			found = extract.find('/');
			if (found > 0) {
				int posOfSlash = extract.find_first_of('/', 0);
				string sday = extract.substr(0, posOfSlash);
				string smonth = extract.substr(posOfSlash + 1);
				day = atoi(sday.c_str());
				month = atoi(smonth.c_str());
				identified = true;
			}
		}

		if (!identified) {
			int numberOfDays = 2; 			// case today or tomorrow
			for (size_t case1 = 0; case1 < numberOfDays; case1++) {
				if (extract == others[case1]) {
					day = day + case1;
					identified = true;
				}
			}
		}

		if (!identified) {
			int numberOfDays = 2; // case next / this
			for (size_t case2 = 0; case2 < numberOfDays; case2++) {
				if (extract == controls[case2]) {
					if (case2 == 0) { // if next
						day = day + 7;
						identified = true;
					}
					// if this, do nothing
					identified = true;
				}
			}
		}

		if (!identified) {
			int numberOfDays = 7; // case day of week
			for (size_t case3 = 0; case3 < numberOfDays; case3++) {
				if (extract == dayInWeek[case3]) {
					int inputDay = case3 + 1; // 1: monday, 2: tuesday ... 7: sunday
					int diff; // used to calculate the number of days difference between current day and input day.
					if (inputDay <= wDay) {
						inputDay = inputDay + numberOfDays;
					}
					diff = inputDay - wDay;
					day = day + diff;
					identified = true;
				}
			}
		}

		if (!identified) {
			// case specific date e.g. 3rd march, this function extracts the numerical day.
			for (size_t case4 = 0; case4 < extract.length(); case4++) {
				if (extract[case4] >= '0' && extract[case4] <= '9') {
					day_extract = day_extract + extract[case4];
					identified = true;
				}
			}
		}

		if (!identified) {
			int numberOfMonth = 12; // case month
			extract[0] = tolower(extract[0]); // to change Month to month
			for (size_t case5 = 0; case5 < numberOfMonth; case5++) {
				int found = -1;
				found = extract.find(mthsInYr[case5]);
				if (found >= 0) {
					month_extract = to_string(case5 + 1);
					identified = true;
					break;
				}
			}
		}


	}// end while (iss)

	// check for day validity
	if (day > daysInMth[month - 1]) {
		day = day - daysInMth[month - 1];
		month++;
	}

	if (day_extract == "") {
		day_extract = to_string(day);
	}
	if (month_extract == "") {
		month_extract = to_string(month);
	}

	standardisedDate = day_extract + "/" + month_extract;

	return standardisedDate;
}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Standardise.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\StickyNote.cpp
	 */

int StickyNote::getDay(){
	return _day;
}
int StickyNote::getMonth(){
	return _month;
}

string StickyNote::getStatus(){
	return _status;

}

int StickyNote::getStartTime() {
	return _startTime;
}

int StickyNote::getEndTime() {
	return _endTime;
}

string StickyNote::getSStartTime() {
	return _sStartTime;
}

string StickyNote::getSEndTime() {
	return _sEndTime;
}

// SETTERS

	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\StickyNote.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Storage.cpp
	 */

bool Storage::erase(list<StickyNote>::iterator iter) {
	int oldSize, newSize;
	oldSize = _noteBook.size();
	_noteBook.erase(iter);
	newSize = _noteBook.size();

	if (newSize == oldSize - 1) {
		return true;
	}
	return false;
}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Storage.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Storage.cpp
	 */

string Storage::oneTaskInfoTypeOne(list<StickyNote>::iterator iter) {

	ostringstream oss;
	oss << "[ ";

	if (iter->getPriority() == "high") {
		oss << "high priority, ";
	}
	
	if (iter->getCategory() == "Deadline") {
		oss << "Before ";
	}
	if (iter->getStartTime() == 0) {
		oss << iter->getTime();
	}
	else {
		oss << iter->getSStartTime();
		if (iter->getCategory() != "Deadline") {
			oss << "-" << iter->getSEndTime();
		}
	}
	oss << " ] " << iter->getDetails(); 
	if (iter->getStatus() == "Clash" || iter->getStatus() == "cleared") {
		oss << " [" << iter->getStatus() << "] ";
	}
	oss << "\r\n";
	return oss.str();

}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\Storage.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\UserTask.cpp
	 */

void UserTask::setCommand(COMMAND cmd) {
	_command = cmd;

}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\oop test\UserTask.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\UnitTest\unittest1.cpp
	 */

//Unit test for SORT.

			TEST_METHOD(SORTinvalid)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "sort\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(false, successful);
			}

			TEST_METHOD(SORTbydate)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "sort by date\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}

			TEST_METHOD(SORTbypriority)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "sort by priority\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\UnitTest\unittest1.cpp





	/**
	 * origin: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\UnitTest\unittest1.cpp
	 */

//Unit test for DISPLAY.
			TEST_METHOD(DISPLAYvalid1)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "display\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}

			TEST_METHOD(DISPLAYvalid2)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "display week\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}

	};
}
	// End of segment: D:\NUS\Year 2 Sem 2 AY 14-15\CS2103\Wisemanager\V0.4\UnitTest\unittest1.cpp





