//@author: a0093863u-unused



	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteSort.cpp
	 */

string ExecuteSort::sortTasksByDate(Storage& _storage){

	vector<list<StickyNote>::iterator> futureTasks;
	getFutureTasks(futureTasks, _storage);

	ostringstream oss;

	vector<list<StickyNote>::iterator> jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec;
	for (size_t i = 0; i < futureTasks.size(); i++){
		switch (futureTasks[i]->getMonth()){
		case 1:
			jan.push_back(futureTasks[i]);
			break;
		case 2:
			feb.push_back(futureTasks[i]);
			break;
		case 3:
			mar.push_back(futureTasks[i]);
			break;
		case 4:
			apr.push_back(futureTasks[i]);
			break;
		case 5:
			may.push_back(futureTasks[i]);
			break;
		case 6:
			jun.push_back(futureTasks[i]);
			break;
		case 7:
			jul.push_back(futureTasks[i]);
			break;
		case 8:
			aug.push_back(futureTasks[i]);
			break;
		case 9:
			sep.push_back(futureTasks[i]);
			break;
		case 10:
			oct.push_back(futureTasks[i]);
			break;
		case 11:
			nov.push_back(futureTasks[i]);
			break;
		case 12:
			dec.push_back(futureTasks[i]);
			break;
		default:
			break;
		}
	}


	vector<list<StickyNote>::iterator> sortedFutureTasks;
	if (jan.size() > 0){
		std::sort(jan.begin(), jan.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < jan.size(); i++){
			sortedFutureTasks.push_back(jan[i]);
		}
	}
	if (feb.size() > 0){
		std::sort(feb.begin(), feb.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < feb.size(); i++){
			sortedFutureTasks.push_back(feb[i]);
		}
	}
	if (mar.size() > 0){
		std::sort(mar.begin(), mar.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < mar.size(); i++){
			sortedFutureTasks.push_back(mar[i]);
		}
	}
	if (apr.size() > 0){
		std::sort(apr.begin(), apr.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < apr.size(); i++){
			sortedFutureTasks.push_back(apr[i]);
		}
	}
	if (may.size() > 0){
		std::sort(may.begin(), may.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < may.size(); i++){
			sortedFutureTasks.push_back(may[i]);
		}
	}
	if (jun.size() > 0){
		std::sort(jun.begin(), jun.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < jun.size(); i++){
			sortedFutureTasks.push_back(jun[i]);
		}
	}
	if (jul.size() > 0){
		std::sort(jul.begin(), jul.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < jul.size(); i++){
			sortedFutureTasks.push_back(jul[i]);
		}
	}
	if (aug.size() > 0){
		std::sort(aug.begin(), aug.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < aug.size(); i++){
			sortedFutureTasks.push_back(aug[i]);
		}
	}
	if (sep.size() > 0){
		std::sort(sep.begin(), sep.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < sep.size(); i++){
			sortedFutureTasks.push_back(sep[i]);
		}
	}
	if (oct.size() > 0){
		std::sort(oct.begin(), oct.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < oct.size(); i++){
			sortedFutureTasks.push_back(oct[i]);
		}
	}
	if (nov.size() > 0){
		std::sort(nov.begin(), nov.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < nov.size(); i++){
			sortedFutureTasks.push_back(nov[i]);
		}
	}
	if (dec.size() > 0){
		std::sort(dec.begin(), dec.end(), compareTwoTasksByDay());
		for (size_t i = 0; i < dec.size(); i++){
			sortedFutureTasks.push_back(dec[i]);
		}
	}

	for (size_t j = 0; j < sortedFutureTasks.size(); j++){
		oss << j + 1 << "." << getAllInfoOfOneTask(sortedFutureTasks[j]) << "\r\n";
	}

	return oss.str();
}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteSort.cpp





