//@author: a0108341r



	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Date.cpp
	 */

string Date::getDateDetails(string date) {
	try{
		if (date == ""){
			throw MESSAGE_NO_DATE_GIVEN;
		}
	}
	catch (string e){
		return e;
	}

	time_t rawTime;
	struct tm * timeInfo = new struct tm;

	time(&rawTime);
	localtime_s(timeInfo, &rawTime);

	int currentDay = timeInfo->tm_mday;
	int currentMonth = timeInfo->tm_mon + 1;
	int currentYear = timeInfo->tm_year + SYSTEM_TIME_YEAR_STARTING_POINT;
	int currentWDay = timeInfo->tm_wday;

	if (currentWDay == 0){
		currentWDay = 7; // 7 is the position of Sunday in a week.
	}

	string wDays[DAY_PER_WEEK] = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
	string months[MONTH_PER_YEAR] = { "January", "February", "March", "April", "May", "June", "July", "August", 
		"September", "October", "November", "December" };
	int daysInMthOfNonLeap[MONTH_PER_YEAR] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	int daysInMthOfLeap[MONTH_PER_YEAR] = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

	int pos = date.find("/");
	string sDay = date.substr(0,pos);
	string sMth = date.substr(pos+1);

	int day = atoi(sDay.c_str());
	int mth = atoi(sMth.c_str());

	int diff = mth - currentMonth;

	if (diff > 0) {
		for (int i = 0; i < diff; i++) {
			if ((currentYear % 100 != 0 && currentYear % 4 == 0) || (currentYear % 100 == 0 && currentYear % 400 == 0)){
				day = day + daysInMthOfLeap[(mth - 1) + i];
			}
			else{
				day = day + daysInMthOfNonLeap[(mth - 1) + i];
			}
		}
	}

	int dayDiff = day - currentDay;


	int weekDay = ((currentWDay - 1) + (dayDiff % DAY_PER_WEEK)) % DAY_PER_WEEK;

	string returnItem = wDays[weekDay] + ", " + sDay + " " + months[mth - 1];

	return returnItem;

}

	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Date.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteDelete.cpp
	 */

string ExecuteDelete::execute(Storage& _storage, ExtDataBase extdb, vector<list<StickyNote>::iterator>& _allItems, bool& successful) {

	string indexToBeDeleted = _task->getRemaining();
	bool isFound = false;


	for (size_t i = 0; i < indexToBeDeleted.size(); i++) {
		try{
			if (indexToBeDeleted[i] < '0' || indexToBeDeleted[i] > '9') {
				successful = false;
				throw MESSAGE_WRONG_INDEX;
			}
		}
		catch (string e){
			return e;
		}
	}

	list<StickyNote>::iterator iter;

	if (indexToBeDeleted.size() == 6) {

		iter = _storage.getIter();
		for (size_t i = 0; i < _storage.getSize(); i++, iter++) {
			if (iter->getIndex() == indexToBeDeleted) {
				isFound = true;
				break;
			}
		}
	}
	else {
		int forEdit = atoi(indexToBeDeleted.c_str());
		forEdit--;

		try{
			if (forEdit < 0 || forEdit >= _allItems.size()) {
				successful = false;
				throw MESSAGE_WRONG_INDEX;
			}
		}
		catch (string e){
			return e;
		}
		isFound = true;
		iter = _allItems[forEdit];
	}

	try{
		if (!isFound) {
			successful = false;
			throw MESSAGE_WRONG_INDEX;
		}
	}
	catch (string e){
		return e;
	}

		string undo;
		undo = _storage.oneTaskInfoTypeTwo(iter);
		undo = "add " + undo;
		_undoDelete.push(undo);
		bool erased = false;
		erased = _storage.erase(iter);
		assert(erased == true);
		_deleted = true;
		_storage.findClashes();

		try{
			if (_deleted){
				successful = true;
				return MESSAGE_DELETED;
			}
			else{
				successful = false;
				throw MESSAGE_NOT_DELETED;
			}
		}
		catch (string e){
			return e;
		}
}

string ExecuteDelete::undo() {
	string undoDelete;
	undoDelete = _undoDelete.top();
	_undoDelete.pop();
	return undoDelete;
}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteDelete.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteDisplay.cpp
	 */

void ExecuteDisplay::getTodayTasks(vector<list<StickyNote>::iterator>& taskToday, Storage& _storage){
	Date date;
	string currentDate = date.getTodayDate();
	list<StickyNote>::iterator iter = _storage.getIter();
	size_t _size = _storage.getSize();

	for (size_t i = 0; i < _size; i++, iter++){
		if (iter->getDate() == currentDate){
			taskToday.push_back(iter);
		}
	}

}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteDisplay.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteDisplay.cpp
	 */

void ExecuteDisplay::getTomorrowTasks(vector<list<StickyNote>::iterator>& taskTmr, Storage& _storage){
	Date date;
	string tomorrow = date.getTomorrowDate();
	list<StickyNote>::iterator iter = _storage.getIter();
	size_t _size = _storage.getSize();

	for (size_t i = 0; i < _size; i++, iter++){
		if (iter->getDate() == tomorrow){
			taskTmr.push_back(iter);
		}
	}

}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteDisplay.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteDisplay.cpp
	 */

void ExecuteDisplay::getDay5Tasks(vector<list<StickyNote>::iterator>& day5, Storage& _storage) {
	Date date;
	string xDay = date.getXDaysLaterDate(4);
	list<StickyNote>::iterator iter = _storage.getIter();
	size_t _size = _storage.getSize();

	for (size_t i = 0; i < _size; i++, iter++){
		if (iter->getDate() == xDay){
			day5.push_back(iter);
		}
	}

}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteDisplay.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteDisplay.cpp
	 */

void ExecuteDisplay::getUnboundedTasks(vector<list<StickyNote>::iterator>& unbounded, Storage& _storage){

	list<StickyNote>::iterator iter = _storage.getIter();
	size_t _size = _storage.getSize();

	for (size_t i = 0; i < _size; i++, iter++){
		if (iter->getDate() == "unbounded event"){
			unbounded.push_back(iter);
		}
	}

}

string ExecuteDisplay::undo() {
	return "";
}

	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteDisplay.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteEdit.cpp
	 */

string ExecuteEdit::execute(Storage& _storage, ExtDataBase extdb, vector<list<StickyNote>::iterator>& _allItems, bool& successful) {
	
	string toEdit = _task->getRemaining();
	try{
		if (toEdit == ""){
			successful = false;
			throw MESSAGE_WRONG_INDEX;
		}
	}
	catch (string e){
		return e;
	}

	bool isUndo = false;
	string type = toEdit.substr(0, 4);
	if (type == "undo") {
		isUndo = true;
		toEdit = toEdit.substr(5);
	}

	string editIndex;
	bool isFound = false;

	int pos = toEdit.find_first_of(" ", 0);
	editIndex = toEdit.substr(0, pos);

	for (size_t i = 0; i < editIndex.size(); i++) {
		try{
			if (editIndex[i] < '0' || editIndex[i] > '9') {
				successful = false;
				throw MESSAGE_WRONG_INDEX;
			}
		}
		catch (string e){
			return e;
		}
	}

	list<StickyNote>::iterator iter;
	
	if (editIndex.size() == 6) {
		
		iter = _storage.getIter();
		for (size_t i = 0; i < _storage.getSize(); i++, iter++) {
			if (iter->getIndex() == editIndex) {
				isFound = true;
				break;
			}
		}
	}
	else {
		int forEdit = atoi(editIndex.c_str());
		forEdit--;

		try{
			if (forEdit < 0 || forEdit >= _allItems.size()) {
				successful = false;
				throw MESSAGE_WRONG_INDEX;
			}
		}
		catch (string e){
			return e;
		}

		isFound = true;
		iter = _allItems[forEdit];
	}

	toEdit = toEdit.substr(pos+1);

	string details = "";
	string date = "";
	string time = "";
	string priority;
	string index = "";
	string category = "";
	bool isADeadline = false;
	Date checkDate;
	Standardise item;

	try{
		if (isFound){
			string undo;
			undo = _storage.oneTaskInfoTypeTwo(iter);

			HandleInput handleInput;

			handleInput.handle(toEdit, details, date, time, priority, index, category, isADeadline, _storage);

			bool changeOccur = false;

			if (details != "" && details != iter->getDetails()) {
				iter->setDetails(details);
				changeOccur = true;
			}

			if (time != "" && time != "All day event" && time != iter->getTime()) {
				time = item.standardiseTime(time);

				try{
					if (!item.verifyValidTime(time)){
						successful = false;
						throw MESSAGE_INVALID_TIME;
					}
				}
				catch (string e){
					return e;
				}

				if (date == "" && time != "All day event") {
					if (iter->getDate() == "unbounded event")
						date = checkDate.getTodayDate();
				}
				iter->setTime(time);
				int sh, eh, sm, em;
				checkDate.setTaskTime(sh, eh, sm, em, time, category);
				iter->setStartTime(sh, sm);
				iter->setEndTime(eh, em);
				changeOccur = true;
			}

			if (date != "" && date != "unbounded event" && date != iter->getDate()) {
				bool isConventionalDate = false;
				bool validDate = false;
				validDate = checkDate.verifyValidDate(date, isConventionalDate);

				try{
					if (isConventionalDate && !validDate){
						successful = false;
						throw MESSAGE_INVALID_DATE;
					}
				}
				catch (string e){
					return e;
				}

				date = item.standardiseDate(date);
				iter->setDate(date);
				changeOccur = true;
			}

			if (priority != "" && priority != iter->getPriority()) {
				if (priority == "none"){
					priority == "";
				}
				iter->setPriority(priority);
				changeOccur = true;
			}

			category = item.standardiseCategory(isADeadline, time);
			if (category != iter->getCategory()) {
				iter->setCategory(category);
				changeOccur = true;
			}

			_storage.findClashes(iter);
			_storage.findClashes();


			index = iter->getIndex();

			if (!isUndo) {
				undo = "edit undo " + index + " " + undo;
				_undoEdit.push(undo);
			}


			try{
				if (changeOccur) {
					successful = true;
					return MESSAGE_EDIT + _storage.oneTaskInfoTypeOne(iter);
				}
				else {
					successful = false;
					throw MESSAGE_ERROR;
				}
			}
			catch (string e){
				return e;
			}
		}
		else {
			successful = false;
			throw MESSAGE_WRONG_INDEX;
		}
	}
	catch (string e){
		return e;
	}
}

string ExecuteEdit::undo() {

	string undoEdit;
	undoEdit = _undoEdit.top();
	_undoEdit.pop();
	return undoEdit;
}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExecuteEdit.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExtDataBase.cpp
	 */

vector<string>* ExtDataBase::getContent() {

	vector<string>* vec = new vector<string> ;
	ifstream ifs(_currentLocation);
	string line;

	if (ifs.is_open()) {
		while (ifs) {
			if (!ifs) {
				break;
			}
			getline(ifs, line);

			line = "add " + line;
			vec->push_back(line);
		}
	}
	if (vec->size() > 0) {
		vec->pop_back(); // gets rid of unwanted last empty input from ifs.
	}

	return vec;
}

	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\ExtDataBase.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\HandleInput.cpp
	 */

bool HandleInput::isComing(string buffer){

	try{
		if (buffer == ""){
			throw false;
		}
	}
	catch (bool e){
		return e;
	}

	bool isComing = false;
	if (buffer == "this" || buffer == "coming" || buffer == "this coming"){
		isComing = true;
	}
	return isComing;
}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\HandleInput.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\HandleInput.cpp
	 */

bool HandleInput::isDeadlineProposition(string extract){

	try{
		if (extract == ""){
			throw false;
		}
	}
	catch (bool e){
		return e;
	}

	bool checkWord = false;
	if (extract == "by" || extract == "on" || extract == "is" || extract == "before"){
		checkWord = true;
	}
	return checkWord;
}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\HandleInput.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\HandleInput.cpp
	 */

bool HandleInput::isNotDeadlineKeyword(string deadline){

	try{
		if (deadline == ""){
			throw false;
		}
	}
	catch (bool e){
		return e;
	}

	bool isNotDone = false;
	if (deadline != "due" || deadline != "end" || deadline != "finish" ||
		deadline != "ready" || deadline != "deadline" || deadline != "prepare" ||
		deadline != "complete" || deadline != "done" || deadline != "finished" ||
		deadline != "prepared" || deadline != "completed"){

		isNotDone = true;
	}

	return isNotDone;
}

	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\HandleInput.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Logic.cpp
	 */

string Logic::getCurrentDirectory(){
	
	return _extdb.getLocation();
}

void Logic::archive() {

	vector<list<StickyNote>::iterator> vec;

	list<StickyNote>::iterator iter;
	iter = _storage.getIter();
	int _size = _storage.getSize();
	string old;

	for (int i = 0; i < _size; i++, iter++) {
		old.clear();
		if (iter->getStatus() == "cleared") {
			old = _storage.oneTaskInfoTypeOne(iter);
			_extdb.archive(old);
			vec.push_back(iter);
		}
	}

	while (!vec.empty()) {
		_storage.erase(vec.back());
		vec.pop_back();
	}

}

	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Logic.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\main.cpp
	 */

int main() {

	Logic* logic = new Logic;
	bool edited = false;

	while (true) {

		string input;
		string result;
		bool successful = false;
		getline(cin, input);
		result = logic->handleInput(input, edited, successful);
		cout << result;

	}


	return 0;
}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\main.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Parser.cpp
	 */

UserTask* Parser::parse(string command) {


	string temp = "", remainingCommand = "";
	int startOfCommand = command.find_first_not_of(" ", 0);
	int endOfCommand = command.find_first_of(" ", startOfCommand);
	if (endOfCommand < 0){
		command = command.substr(startOfCommand);
		remainingCommand = "";
	}
	else{
		temp = command.substr(startOfCommand, endOfCommand - startOfCommand);
		int startOfRemaining = command.find_first_not_of(" ", endOfCommand);
		if (startOfRemaining < 0){
			remainingCommand = "";
		}
		remainingCommand = command.substr(startOfRemaining);
		command = temp;
	}

	if (command[command.length() - 2] == '\r'&&command[command.length() - 1] == '\n'){
		size_t commandSize = command.length() - 2;  // Ignore the "/r/n" of the string.
		for (size_t index = 0; index < commandSize; index++) {
			command[index] = tolower(command[index]);
		}
		command = command.substr(0, commandSize);  // Remove "/r/n" of the string from UI.
	}

	else{
		for (size_t index = 0; index < command.length(); index++) {
			command[index] = tolower(command[index]);
		}
	}

	if (remainingCommand.size() > 0) {
		if (remainingCommand[remainingCommand.length() - 2] == '\r' && remainingCommand[remainingCommand.length() - 1 ] == '\n'){
			size_t commandSize = remainingCommand.length() - 2;  // Ignore the "/r/n" of the string.
			remainingCommand = remainingCommand.substr(0, commandSize);  // Remove "/r/n" of the string from UI.
		}
	}
	_task->setRemaining(remainingCommand);

	if (command == "add") {
		_task->setCommand( COMMAND::ADD );
	}
	else if (command == "delete") {
		_task->setCommand(COMMAND::DELETE);
	}
	else if (command == "edit") {
		_task->setCommand(COMMAND::EDIT);
	}
	else if (command == "display") {
		_task->setCommand(COMMAND::DISPLAY);
	}
	else if (command == "search") {
		_task->setCommand(COMMAND::SEARCH);
	}
	else if (command == "exit") {
		_task->setCommand(COMMAND::EXIT);
	}
	else if (command == "directory") {
		_task->setCommand(COMMAND::DIRECTORY);
	}
	else if (command == "help") {
		_task->setCommand(COMMAND::HELP);
	}
	else if (command == "undo") {
		_task->setCommand(COMMAND::UNDO);
	}
	else if (command == "mark") {
		_task->setCommand(COMMAND::MARK);
	}
	else
		_task->setCommand(COMMAND::ERROR);

	return _task;

}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Parser.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Standardise.cpp
	 */

bool Standardise::verifyValidTime(string time){
	try{
		if (time != "All day event" && time != ""){
			int pos1 = time.find_first_of(':');
			int pos2 = time.find_first_of('-');
			int pos3 = time.find_last_of(':');
			int startHr = atoi((time.substr(0, pos1)).c_str());
			int startMin = atoi((time.substr(pos1 + 1, pos2 - (pos1 + 1))).c_str());
			int endHr = atoi((time.substr(pos2 + 1, pos3 - (pos2 + 1))).c_str());
			int endMin = atoi((time.substr(pos3 + 1)).c_str());

				if (!(checkHr(startHr) && checkHr(endHr) && checkMin(startMin) && checkMin(endMin))){
					return false;
				}
				else{
					if (checkCorrectSequence(startHr, endHr, startMin, endMin)){
						return true;
					}
					else{
						return false;
					}
				}
		}
		else{
			throw true;
		}
	}
	catch (bool e){
		return e;
	}
}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Standardise.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\StickyNote.cpp
	 */

void StickyNote::setDay(int day){
	_day = day;
}
void StickyNote::setMonth(int month){
	_month = month;
}

void StickyNote::setStartTime(int startH, int startM) {
	ostringstream oss;
	oss << startH << ":" << startM;
	_sStartTime = oss.str();
}

void StickyNote::setEndTime(int endH, int endM) {
	ostringstream oss;
	oss << endH << ":" << endM;
	_sEndTime = oss.str();
}

void StickyNote::setDetails(string change) {
	_details = change;
}

	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\StickyNote.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Storage.cpp
	 */

string Storage::addNewNote(StickyNote note) {
	
	findClashes(note);
	_noteBook.push_back(note);
	return MESSAGE_ADD;
}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Storage.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Storage.cpp
	 */

string Storage::oneTaskInfoTypeTwo(list<StickyNote>::iterator iter) {
	ostringstream oss;
	string details = iter->getDetails();
	int startingPos = details.find_first_not_of(" ");
	if (startingPos >= 0){
		details = details.substr(startingPos);
	}
	oss << "\"" <<  details << "\""<< " ";
	if (iter->getDate() != "unbounded event") {
		oss << iter->getDate() << " ";
	}
	else {
		oss << "99/99" << " ";
	}
	if (iter->getTime() != "All day event") {
		oss << iter->getTime() << " ";
	}
	else {
		oss << "99:99" << " ";
	}
	if (iter->getPriority() != "") {
		oss << "-" << iter->getPriority(); 
	}
	else {
		oss << "-none";
	}
		oss << "\n";
		//<< "\r\n";
	return oss.str();
}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Storage.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Storage.cpp
	 */

bool Storage::noRepeatIndexCount(string index) {

	list<StickyNote>::iterator iter;
	iter = _noteBook.begin();

	for (size_t i = 0; i < _noteBook.size(); i++, iter++) {
		try{
			if (iter->getIndex() == index) {
				throw false;
			}
		}
		catch (bool e){
			return e;
		}
	}
	return true;

}

	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Storage.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Storage.cpp
	 */

void Storage::findClashes(list<StickyNote>::iterator iter) {

	int _size = getSize();
	list<StickyNote>::iterator S_iter;
	S_iter = getIter();

	for (int i = 0; i < _size; i++, S_iter++) {
		if ((iter->getDate() == S_iter->getDate()) && S_iter->getStartTime() != 0 && S_iter->getEndTime() != 0 
			&& S_iter->getStatus() != "cleared" && (iter->getIndex() != S_iter->getIndex())) {

				if (!(iter->getStartTime() > S_iter->getStartTime() && iter->getStartTime() >= S_iter->getEndTime())
					&& !(iter->getEndTime() <= S_iter->getStartTime() && iter->getEndTime() < S_iter->getEndTime())) {
						iter->setStatus("Clash");
						S_iter->setStatus("Clash");
			}
		}
	}
}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\Storage.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\UserTask.cpp
	 */

void UserTask::setRemaining(string remains) {
	_remaining = remains;

}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\oop test\UserTask.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\UnitTest\unittest1.cpp
	 */

//Unit test for HELP.		

			TEST_METHOD(HELPvalid1)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "help add\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}

			TEST_METHOD(HELPvalid2)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "help delete\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}

			TEST_METHOD(HELPvalid3)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "help edit\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}

			TEST_METHOD(HELPvalid4)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "help display\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}

			TEST_METHOD(HELPvalid5)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "help mark\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}

			TEST_METHOD(HELPvalid6)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "help directory\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}

			TEST_METHOD(HELPvalid9)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "help search\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\UnitTest\unittest1.cpp





	/**
	 * origin: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\UnitTest\unittest1.cpp
	 */

//Unit test for DIRECTORY.
			TEST_METHOD(DIRECTORYvalid)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "directory D:\\abc.txt\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}

			TEST_METHOD(DIRECTORYinvalid)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "directory D:\\a\\abc.txt\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(false, successful);
			}

			TEST_METHOD(DIRECTORYvalid2)
			{
				bool edited = false;
				bool successful = false;
				Logic* logic = new Logic;
				string input = "directory D:\\Storage.txt\r\n";
				logic->handleInput(input, edited, successful);
				Assert::AreEqual(true, successful);
			}
	// End of segment: D:\NUS Undergraduate Studies\CS2103\Project\V0.5\UnitTest\unittest1.cpp





